Homeworks-Locks
________________________________________________________________________
jne                         # jump if test'd values are not equal
je                          #                       ... equal
jlt                         #     ... second is less than first
jlte                        #               ... less than or equal
jgt                         #            ... is greater than
jgte                        #               ... greater than or equal
________________________________________________________________________



1.
Examine flag.s. This code “implements” locking with a single memory flag.
Can you understand the assembly?
-----------------------------------------
In this assembly code we have two threads. We actually want to put Thread 2 
into a critical section. But looking at the code we put Thread 1 to it.
This might become a problem and maybe there won't be a context switch.
So Thread 2 cannot go into critical section only when Thread 1 is out of it.





2.
When you run with the defaults, does flag.s work? 
Use the -M and -R flags to trace variables and registers (and turn on -c to see their values).
Can you predict what value will end up in flag?
________________________________________________________________
-M -> comma-separated list of addrs to trace (e.g., 20000,20001)
-R -> comma-separated list of regs to trace (e.g., ax,bx,cx,dx)
-----------------------------------------------------------------------
ARG seed 0
ARG numthreads 2
ARG program flag.s
ARG interrupt frequency 50
ARG interrupt randomness False
ARG procsched 
ARG argv 
ARG load address 1000
ARG memsize 128
ARG memtrace 
ARG regtrace ax,bx
ARG cctrace False
ARG printstats False
ARG verbose False


   ax    bx          Thread 0                Thread 1         

    ?     ?   
    ?     ?   1000 mov  flag, %ax
    ?     ?   1001 test $0, %ax
    ?     ?   1002 jne  .acquire
    ?     ?   1003 mov  $1, flag
    ?     ?   1004 mov  count, %ax
    ?     ?   1005 add  $1, %ax
    ?     ?   1006 mov  %ax, count
    ?     ?   1007 mov  $0, flag
    ?     ?   1008 sub  $1, %bx
    ?     ?   1009 test $0, %bx
    ?     ?   1010 jgt .top
    ?     ?   1011 halt
    ?     ?   ----- Halt;Switch -----  ----- Halt;Switch -----  
    ?     ?                            1000 mov  flag, %ax
    ?     ?                            1001 test $0, %ax
    ?     ?                            1002 jne  .acquire
    ?     ?                            1003 mov  $1, flag
    ?     ?                            1004 mov  count, %ax
    ?     ?                            1005 add  $1, %ax
    ?     ?                            1006 mov  %ax, count
    ?     ?                            1007 mov  $0, flag
    ?     ?                            1008 sub  $1, %bx
    ?     ?                            1009 test $0, %bx
    ?     ?                            1010 jgt .top
    ?     ?                            1011 halt
-----------------------------------------------------------------------SOLUTION
   bx    ax          Thread 0                Thread 1         

    0     0   
    0     0   1000 mov  flag, %ax
    0     0   1001 test $0, %ax
    0     0   1002 jne  .acquire
    0     0   1003 mov  $1, flag - flag=1
    0     0   1004 mov  count, %ax - count=0
    0     1   1005 add  $1, %ax
    0     1   1006 mov  %ax, count - count=1
    0     1   1007 mov  $0, flag - flag=0
   -1     1   1008 sub  $1, %bx
   -1     1   1009 test $0, %bx
   -1     1   1010 jgt .top
   -1     1   1011 halt
    0     0   ----- Halt;Switch -----  ----- Halt;Switch -----  
    0     0                            1000 mov  flag, %ax
    0     0                            1001 test $0, %ax
    0     0                            1002 jne  .acquire
    0     0                            1003 mov  $1, flag - flag=1
    0     1                            1004 mov  count, %ax - Variablen behalten den Wert gespeichert
    0     2                            1005 add  $1, %ax
    0     2                            1006 mov  %ax, count - count=2
    0     2                            1007 mov  $0, flag - flag=0
   -1     2                            1008 sub  $1, %bx
   -1     2                            1009 test $0, %bx
   -1     2                            1010 jgt .top
   -1     2                            1011 halt




3.
Change the value of the register %bx with the -a flag 
(e.g.,-a bx=2,bx=2 if you are running just two threads). 
What does the code do? How does it change your answer for the question above?
------------------------------------------------------------
./x86.py -p flag.s -a bx=2,bx=2 -R bx,ax


ARG seed 0
ARG numthreads 2
ARG program flag.s
ARG interrupt frequency 50
ARG interrupt randomness False
ARG procsched 
ARG argv bx=2,bx=2
ARG load address 1000
ARG memsize 128
ARG memtrace 
ARG regtrace ax,bx
ARG cctrace False
ARG printstats False
ARG verbose False


   ax    bx          Thread 0                Thread 1         

    ?     ?   
    ?     ?   1000 mov  flag, %ax
    ?     ?   1001 test $0, %ax
    ?     ?   1002 jne  .acquire
    ?     ?   1003 mov  $1, flag
    ?     ?   1004 mov  count, %ax
    ?     ?   1005 add  $1, %ax
    ?     ?   1006 mov  %ax, count
    ?     ?   1007 mov  $0, flag
    ?     ?   1008 sub  $1, %bx
    ?     ?   1009 test $0, %bx
    ?     ?   1010 jgt .top
    ?     ?   1000 mov  flag, %ax
    ?     ?   1001 test $0, %ax
    ?     ?   1002 jne  .acquire
    ?     ?   1003 mov  $1, flag
    ?     ?   1004 mov  count, %ax
    ?     ?   1005 add  $1, %ax
    ?     ?   1006 mov  %ax, count
    ?     ?   1007 mov  $0, flag
    ?     ?   1008 sub  $1, %bx
    ?     ?   1009 test $0, %bx
    ?     ?   1010 jgt .top
    ?     ?   1011 halt
    ?     ?   ----- Halt;Switch -----  ----- Halt;Switch -----  
    ?     ?                            1000 mov  flag, %ax
    ?     ?                            1001 test $0, %ax
    ?     ?                            1002 jne  .acquire
    ?     ?                            1003 mov  $1, flag
    ?     ?                            1004 mov  count, %ax
    ?     ?                            1005 add  $1, %ax
    ?     ?                            1006 mov  %ax, count
    ?     ?                            1007 mov  $0, flag
    ?     ?                            1008 sub  $1, %bx
    ?     ?                            1009 test $0, %bx
    ?     ?                            1010 jgt .top
    ?     ?                            1000 mov  flag, %ax
    ?     ?                            1001 test $0, %ax
    ?     ?                            1002 jne  .acquire
    ?     ?                            1003 mov  $1, flag
    ?     ?                            1004 mov  count, %ax
    ?     ?                            1005 add  $1, %ax
    ?     ?                            1006 mov  %ax, count
    ?     ?                            1007 mov  $0, flag
    ?     ?                            1008 sub  $1, %bx
    ?     ?                            1009 test $0, %bx
    ?     ?                            1010 jgt .top
    ?     ?                            1011 halt
----------------------------------------------------------------------SOLUTION
   bx    ax          Thread 0                Thread 1         

    2     0   
    2     0   1000 mov  flag, %ax
    2     0   1001 test $0, %ax
    2     0   1002 jne  .acquire
    2     0   1003 mov  $1, flag - flag=1
    2     0   1004 mov  count, %ax
    2     1   1005 add  $1, %ax
    2     1   1006 mov  %ax, count - count=1
    2     1   1007 mov  $0, flag - flag=0
    1     1   1008 sub  $1, %bx
    1     1   1009 test $0, %bx
    1     1   1010 jgt .top
    1     0   1000 mov  flag, %ax - %ag=0
    1     0   1001 test $0, %ax
    1     0   1002 jne  .acquire
    1     0   1003 mov  $1, flag - flag=1
    1     1   1004 mov  count, %ax - %ax=count=1
    1     2   1005 add  $1, %ax
    1     2   1006 mov  %ax, count - count=2
    1     2   1007 mov  $0, flag - flag=0
    0     2   1008 sub  $1, %bx
    0     2   1009 test $0, %bx
    0     2   1010 jgt .top
    0     2   1011 halt
    2     0   ----- Halt;Switch -----  ----- Halt;Switch -----  
    2     0                            1000 mov  flag, %ax - %ax=flag=0
    2     0                            1001 test $0, %ax
    2     0                            1002 jne  .acquire
    2     0                            1003 mov  $1, flag - flag=1
    2     2                            1004 mov  count, %ax - %ax=count=2
    2     3                            1005 add  $1, %ax
    2     3                            1006 mov  %ax, count - count=3
    2     3                            1007 mov  $0, flag - flag=0
    1     3                            1008 sub  $1, %bx
    1     3                            1009 test $0, %bx
    1     3                            1010 jgt .top
    1     0                            1000 mov  flag, %ax - %ax=flag=0
    1     0                            1001 test $0, %ax
    1     0                            1002 jne  .acquire
    1     0                            1003 mov  $1, flag - flag=1
    1     3                            1004 mov  count, %ax - %ax=count=3
    1     4                            1005 add  $1, %ax
    1     4                            1006 mov  %ax, count - count=4
    1     4                            1007 mov  $0, flag - flag=0
    0     4                            1008 sub  $1, %bx
    0     4                            1009 test $0, %bx
    0     4                            1010 jgt .top
    0     4                            1011 halt





4.
Set bx to a high value for each thread, and then use the -i flag to 
generate different interrupt frequencies; what values lead to a bad outcomes? 
Which lead to good outcomes?
---------------------------------------------------
????





5.
Now let’s look at the programtest-and-set.s. 
First, try to understandthe code, which uses thexchginstruction to build a simple locking primi-tive. 
How is the lock acquire written? How about lock release?
--------------------------------------------------------
When xchg was created, mutex gets the value of %ax.
Testing %ax: if it is 0, the lock is free otherwise is it still locked.
At the critical section count gets the value of %ax.
And after the lock is released by moving 0 to mutex.
The loop checks if %bx is 0.






6.
Now run the code, changing the value of the interrupt interval(-i) again,
and making sure to loop for a number of times. 
Does the code always work as expected? 
Does it sometimes lead to an inefficient use of the CPU?
How could you quantify that?
____________________________________________________________________________
./x86.py -p test-and-set.s -M mutex -i 5 -a bx=5,bx=5 -R ax,bx -c
------------------------------------
Mutex is 0 - so the code works :)





7.
Use the -P flag to generate specific tests of the locking code. 
For example, run a schedule that grabs the lock in the first thread, but then tries to acquire it in the second. 
Does the right thing happen? What else should you test?
____________________________________________________________________
-P lets you specify exactly which threads run when; 
   e.g., 11000 would run thread 1 for 2 instructions, then thread 0 for 3,
   then repeat


---------------------------------------------------------
??????







8.
Now let’s look at the code in peterson.s, which implements Peterson’salgorithm (mentioned in a sidebar in the text). 
Study the code and see if you can make sense of it.
-----------------------------------------------------------
9.
Now run the code with different values of -i.
What kinds of different behavior do you see? 
Make sure to set the thread IDs appropriately (using -a bx=0,bx=1 for example) as the code assumes it.
______________________________________________________
./x86.py -p peterson.s -i 10 -a bx=0,bx=1 -R ax,bx -c
--------------------------------------------------------------
 ax    bx          Thread 0                Thread 1         

    0     0   
    0     0   1000 lea flag, %fx
    0     0   1001 mov %bx, %cx
    0     0   1002 neg %cx
    0     0   1003 add $1, %cx
    0     0   1004 mov $1, 0(%fx,%bx,4)
    0     0   1005 mov %cx, turn
    0     0   1006 mov 0(%fx,%cx,4), %ax
    0     0   1007 test $1, %ax - %ax=1
    0     0   1008 jne .fini
    0     0   1012 mov count, %ax
    0     1   ------ Interrupt ------  ------ Interrupt ------  
    0     1                            1000 lea flag, %fx
    0     1                            1001 mov %bx, %cx
    0     1                            1002 neg %cx
    0     1                            1003 add $1, %cx
    0     1                            1004 mov $1, 0(%fx,%bx,4)
    0     1                            1005 mov %cx, turn
    1     1                            1006 mov 0(%fx,%cx,4), %ax
    1     1                            1007 test $1, %ax
    1     1                            1008 jne .fini
    0     1                            1009 mov turn, %ax
    0     0   ------ Interrupt ------  ------ Interrupt ------  
    1     0   1013 add $1, %ax
    1     0   1014 mov %ax, count
    1     0   1015 mov $0, 0(%fx,%bx,4)
    1     0   1016 mov %cx, turn
    1     0   1017 halt
    0     1   ----- Halt;Switch -----  ----- Halt;Switch -----  
    0     1                            1010 test %cx, %ax
    0     1                            1011 je .spin1
    0     1                            1006 mov 0(%fx,%cx,4), %ax
    0     1                            1007 test $1, %ax
    0     1                            1008 jne .fini
    0     1   ------ Interrupt ------  ------ Interrupt ------  
    1     1                            1012 mov count, %ax
    2     1                            1013 add $1, %ax
    2     1                            1014 mov %ax, count
    2     1                            1015 mov $0, 0(%fx,%bx,4)
    2     1                            1016 mov %cx, turn
    2     1                            1017 halt





10.?????
Can you control the scheduling (with the -P flag) to “prove” that the code works? 
What are the different cases you should show hold? 
Think about mutual exclusion and deadlock avoidance.
-------------------------------------------------------------------------------------------
 flag  turn count      ax    bx    cx    fx          Thread 0                Thread 1         

    0     0     0       0     0     0     0   
    0     0     0       0     0     0   100   1000 lea flag, %fx
    0     0     0       0     0     0   100   1001 mov %bx, %cx
    0     0     0       0     0     0   100   1002 neg %cx
    0     0     0       0     0     1   100   1003 add $1, %cx
    1     0     0       0     0     1   100   1004 mov $1, 0(%fx,%bx,4)
    1     1     0       0     0     1   100   1005 mov %cx, turn
    1     1     0       0     0     1   100   1006 mov 0(%fx,%cx,4), %ax
    1     1     0       0     0     1   100   1007 test $1, %ax
    1     1     0       0     0     1   100   1008 jne .fini
    1     1     0       0     0     1   100   1012 mov count, %ax
    1     1     0       0     1     0     0   ------ Interrupt ------  ------ Interrupt ------  
    1     1     0       0     1     0   100                            1000 lea flag, %fx
    1     1     0       0     1     1   100                            1001 mov %bx, %cx
    1     1     0       0     1    -1   100                            1002 neg %cx
    1     1     0       0     1     0   100                            1003 add $1, %cx
    1     1     0       0     1     0   100                            1004 mov $1, 0(%fx,%bx,4)
    1     0     0       0     1     0   100                            1005 mov %cx, turn
    1     0     0       1     1     0   100                            1006 mov 0(%fx,%cx,4), %ax
    1     0     0       1     1     0   100                            1007 test $1, %ax
    1     0     0       1     1     0   100                            1008 jne .fini
    1     0     0       0     1     0   100                            1009 mov turn, %ax
    1     0     0       0     0     1   100   ------ Interrupt ------  ------ Interrupt ------  
    1     0     0       1     0     1   100   1013 add $1, %ax
    1     0     1       1     0     1   100   1014 mov %ax, count
    0     0     1       1     0     1   100   1015 mov $0, 0(%fx,%bx,4)
    0     1     1       1     0     1   100   1016 mov %cx, turn
    0     1     1       1     0     1   100   1017 halt
    0     1     1       0     1     0   100   ----- Halt;Switch -----  ----- Halt;Switch -----  
    0     1     1       0     1     0   100                            1010 test %cx, %ax
    0     1     1       0     1     0   100                            1011 je .spin1
    0     1     1       0     1     0   100                            1006 mov 0(%fx,%cx,4), %ax
    0     1     1       0     1     0   100                            1007 test $1, %ax
    0     1     1       0     1     0   100                            1008 jne .fini
    0     1     1       0     1     0   100   ------ Interrupt ------  ------ Interrupt ------  
    0     1     1       1     1     0   100                            1012 mov count, %ax
    0     1     1       2     1     0   100                            1013 add $1, %ax
    0     1     2       2     1     0   100                            1014 mov %ax, count
    0     1     2       2     1     0   100                            1015 mov $0, 0(%fx,%bx,4)
    0     0     2       2     1     0   100                            1016 mov %cx, turn
    0     0     2       2     1     0   100                            1017 halt





11.
Now study the code for the ticket lock in ticket.s. 
Does it match the code in the chapter? 
Then run with the following flags:-a bx=1000,bx=1000(causing each thread to loop through the critical section 1000 times). 
Watch what happens; do the threads spend much time spin-waiting for the lock?
----------------------------------------------------------
It is the same code.
The spin takes a lot of time of spin-waiting.

ticket  turn      bx    ax    cx          Thread 0                Thread 1         

    0     0    1000     0     0   
    0     0    1000     1     0   1000 mov $1, %ax
    1     0    1000     0     0   1001 fetchadd %ax, ticket - ticket=1,%ax=0
    1     0    1000     0     0   1002 mov turn, %cx
    1     0    1000     0     0   1003 test %cx, %ax
    1     0    1000     0     0   1004 jne .tryagain
    1     0    1000     0     0   1005 mov  count, %ax - count=0
    1     0    1000     1     0   1006 add  $1, %ax
    1     0    1000     1     0   1007 mov  %ax, count - count=1
    1     0    1000     1     0   1008 mov $1, %ax
    1     1    1000     0     0   1009 fetchadd %ax, turn - turn=1,%ax=0
    1     1     999     0     0   1010 sub  $1, %bx
    1     1     999     0     0   1011 test $0, %bx
    1     1     999     0     0   1012 jgt .top
    1     1     999     1     0   1000 mov $1, %ax
    2     1     999     1     0   1001 fetchadd %ax, ticket
    2     1     999     1     1   1002 mov turn, %cx
    2     1     999     1     1   1003 test %cx, %ax
    2     1     999     1     1   1004 jne .tryagain
    2     1     999     1     1   1005 mov  count, %ax
    2     1     999     2     1   1006 add  $1, %ax
    2     1     999     2     1   1007 mov  %ax, count
    2     1     999     1     1   1008 mov $1, %ax
    2     2     999     1     1   1009 fetchadd %ax, turn
    2     2     998     1     1   1010 sub  $1, %bx
    2     2     998     1     1   1011 test $0, %bx
    2     2     998     1     1   1012 jgt .top
    2     2     998     1     1   1000 mov $1, %ax
    3     2     998     2     1   1001 fetchadd %ax, ticket
    3     2     998     2     2   1002 mov turn, %cx
    3     2     998     2     2   1003 test %cx, %ax
    3     2     998     2     2   1004 jne .tryagain
    3     2     998     2     2   1005 mov  count, %ax
    3     2     998     3     2   1006 add  $1, %ax
    3     2     998     3     2   1007 mov  %ax, count
    3     2     998     1     2   1008 mov $1, %ax
    3     3     998     2     2   1009 fetchadd %ax, turn
    3     3     997     2     2   1010 sub  $1, %bx
    3     3     997     2     2   1011 test $0, %bx
    3     3     997     2     2   1012 jgt .top
    3     3     997     1     2   1000 mov $1, %ax
    4     3     997     3     2   1001 fetchadd %ax, ticket
    4     3     997     3     3   1002 mov turn, %cx
    4     3     997     3     3   1003 test %cx, %ax
    4     3     997     3     3   1004 jne .tryagain
    4     3     997     3     3   1005 mov  count, %ax
    4     3     997     4     3   1006 add  $1, %ax
    4     3     997     4     3   1007 mov  %ax, count
    4     3     997     1     3   1008 mov $1, %ax
    4     4     997     3     3   1009 fetchadd %ax, turn
    4     4     996     3     3   1010 sub  $1, %bx
    4     4    1000     0     0   ------ Interrupt ------  ------ Interrupt ------  
    4     4    1000     1     0                            1000 mov $1, %ax

-> 1010 sub  $1, %bx
   1011 test $0, %bx







12.
How does the code behave as you add more threads?
--------------------------------------------------------
There will be more spins and a spin wastes CPU time






13.
Now examine yield.s, in which a yield instruction enables one thread 
to yield control of the CPU  (realistically, this would be an OS primitive,
but for the simplicity, we assume an instruction does the task). 
Find a scenario where test-and-set.s wastes cycles spinning, but yield.s does not.
----------------------------------------------------------
yield.s only has at the beginning, all other lines are the same:

yield              # if not, yield and try again
j .acquire
.acquire_done

-> 




14.
Finally, examine test-and-test-and-set.s. 
What does this lock do? What kind of savings does it introduce as compared to test-and-set.s?
-----------------------------------------------------------
The difference is that in test-and-test-and-set %ax spins directly when the value
is not 0 (so when mutex is moved to %ax). In test-and-set it doesn't.







