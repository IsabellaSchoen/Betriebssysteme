Homeworks - Condition Variables
___________________________________
  -l <number of items each producer produces>
  -m <size of the shared producer/consumer buffer>
  -p <number of producers>
  -c <number of consumers>
  -v tracing the code
___________________________________


1.
Our first question focuses on main-two-cvs-while.c (the working solution). 
First, study the code.
Do you think you have an understanding of what should happen when you run the program?
-----------------------------------------------------





2.
Run with one producer and one consumer, and have the producerproduce a few values. 
Start with a buffer (size 1), and then increase it. 
How does the behavior of the code change with larger buffers?(or does it?) 
What would you predict num full to be with differentbuffer sizes (e.g.,-m 10) and different 
numbers of produced items(e.g.,-l 100), when you change the consumer sleep string from
default (no sleep) to -C 0,0,0,0,0,0,1?
------------------------------------------------------
./main-two-cvs-while -p 1 -c 1 -m 1 -l 3  -v
------------------------------------------------
  NF        P0 C0 

  0 [*--- ]    c0
  0 [*--- ] p0
  0 [*--- ]    c1
  0 [*--- ]    c2
  0 [*--- ] p1
  1 [*  0 ] p4
  1 [*  0 ] p5
  1 [*  0 ] p6
  1 [*  0 ]    c3
  1 [*  0 ] p0
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ] p1
  1 [*  1 ] p4
  1 [*  1 ]    c0
  1 [*  1 ] p5
  1 [*  1 ] p6
  1 [*  1 ]    c1
  1 [*  1 ] p0
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ] p1
  1 [*  2 ] p4
  1 [*  2 ]    c0
  1 [*  2 ] p5
  1 [*  2 ] p6
  1 [*  2 ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  1 [*EOS ] [main: added end-of-stream marker]
  1 [*EOS ]    c6
  1 [*EOS ]    c0
  1 [*EOS ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6

Consumer consumption:
  C0 -> 3 (-l)

--> with "-P 1,0,0,0,0,0,0" the first one goes to sleep, so c1 goes to sleep
and p1 can run. 
--> "-P 1,0,0,0,0,0,0": c1, p1 goes to sleep so c1 starts
--> "-P 1,1,1,0,0,0,0": c1,p1,c1 goes to sleep so p1 starts





4.
Let’s look at some timings.  How long do you think the following execution, 
with one producer, three consumers, a single-entry shared buffer, and each 
consumer pausing at point c3 for a second, will take?
-------------------------------------------------------------
./main-two-cvs-while -p 1 -c 3 -m 1 -C 0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 -l 10 -v -t
----------------------------------------------------------------------------------------------
Consumer consumption:
  C0 -> 0
  C1 -> 2
  C2 -> 8

Total time: 13.16 seconds





5.
Now change the size of the shared buffer to 3 (-m 3). Will this make any difference in the total time?
--------------------------------------
Yes, because now there are more options.Consumer consumption:

  C0 -> 0
  C1 -> 4
  C2 -> 6

Total time: 11.10 seconds - but not that much difference






6.
Now change the location of the sleep to c6 (this models a consumer taking something 
off the queue and then doing something with it), again using a single-entry buffer. 
What time do you predict in this case?
------------------------------------------------
./main-two-cvs-while -p 1 -c 3 -m 1-C 0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 -l 10-v -t
---------------------------------------------------------------------------------------------
Consumer consumption:
  C0 -> 4
  C1 -> 3
  C2 -> 3

Total time: 5.01 seconds






7.
Finally, change the buffer size to 3 again (-m 3). What time do youpredict now?
-------------------------------Consumer consumption:
  C0 -> 4
  C1 -> 3
  C2 -> 3

Total time: 5.02 seconds







8.
Now let’s look at main-one-cv-while.c.  
Can you configure a sleep string, assuming a single producer, one consumer, 
and a buffer of size 1, to cause a problem with this code?
-------------------------------------------------------------
Nope, you cannot
--------------------------






9.
Now change the number of consumers to two. 
Can you construct sleep strings for the producer and the consumers so as 
to cause a problem in the code?
----------------------------------------
Only: you cannot put consumer and producer at the same time to sleep.






10.
Now examine main-two-cvs-if.c
Can you cause a problem to happen in this code? 
Again consider the case where there is only one consumer, and then 
the case where there is more than one.
------------------------------------------
????
------------------------------
in general:
 NF        P0 C0 
  0 [*--- ] p0
  0 [*--- ]    c0
  0 [*--- ]    c1
  0 [*--- ]    c2
  0 [*--- ] p1
  1 [*  0 ] p4
  1 [*  0 ] p5
  1 [*  0 ] p6
  1 [*  0 ]    c3
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  1 [*EOS ] [main: added end-of-stream marker]
  1 [*EOS ]    c0
  1 [*EOS ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6

Consumer consumption:
  C0 -> 1

Total time: 0.00 seconds





11.
Finally, examine main-two-cvs-while-extra-unlock.c 
What problem arises when you release the lock before doing a put or a get? 
Can you reliably cause such a problem to happen, given the sleep strings? 
What bad thing can happen?
-----------------------------------
????
