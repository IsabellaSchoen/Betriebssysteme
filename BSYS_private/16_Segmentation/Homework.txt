Segmentation - Homeworks





For each virtual address, either write down the physical address it translates to
OR write down that it is an out-of-bounds address (a segmentation violation). For
this problem, you should assume a simple address space with two segments: the top
bit of the virtual address can thus be used to check whether the virtual address
is in segment 0 (topbit=0) or segment 1 (topbit=1). Note that the base/limit pairs
given to you grow in different directions, depending on the segment, i.e., segment 0
grows in the positive direction, whereas segment 1 in the negative. 
------------------------------------------------
-a -> address space size in byte
-p -> physical memory size in byte
-b -> value of base register
-l -> value of limit register
-B -> 
-L -> 
-s -> the random seed
------------------------------------------------

Lösung für die Aufgabe 1:
 - wir haben zwei Segemente, die jeweils 20 Byte lang sind
 - Seg 0 beginnt bei 0 und geht bis 19
 - Seg 1 beginnt bei 492 und geht bis 512
 - nun müssen wir uns dies mit dem address space 128 vorstellen 
 - somit geht Seg0 von 0-19 und Seg1 108-128
 - nun haben wir eine virtuelle Adresse: x 
 - und wir haben den address space: 128
 - und die Segmente mit Anfang und Ende
 - für jedes Segment gibt es unterschiedliche Rechnungen
     - # seg 1: paddr = nbase1 + (vaddr - asize)
                physikalische Adresse = das Ende von Seg1 + (virtuelle Adresse - address space)
     - # seg 0: paddr = vaddr + base0
                physikalische Adresse = virtuelle Adresse + Anfang von Seg0




1.
First let’s use a tiny address space to translate some addresses. 
Here’s a simple set of parameters with a few different random seeds; can you translate the addresses?
-----------------------------------------------------------------------------
segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 0 

ARG seed 0
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
	-> Segment 0's base is set to a physical address of 0 and is size 20 bytes
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
	-> Segment 1's base is set to a physical address of 512 and is size 20 bytes
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  1: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
  VA  2: 0x00000035 (decimal:   53) --> SEGMENTATION VIOLATION (SEG0)
  VA  3: 0x00000021 (decimal:   33) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x00000041 (decimal:   65) --> SEGMENTATION VIOLATION (SEG1)
------------------------------------------------------------------------SOLUTION
VA  0: -> 108 ist in Seg1: 512 + (108 - 128) = 492 (physikalische Adresse)
VA  1: 97: Segmgentatin violation, da 97 in keinem Segment ist
VA  2: 53: Segmgentatin violation, da 53 in keinem Segment ist
VA  3: 33: Segmgentatin violation, da 33 in keinem Segment ist
VA  4: 65: Segmgentatin violation, da 65 in keinem Segment ist
_____________________________________________________________________________
segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 1

ARG seed 1
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x00000011 (decimal:   17) --> VALID in SEG0: 0x00000011 (decimal:   17)
  VA  1: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  2: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
  VA  3: 0x00000020 (decimal:   32) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x0000003f (decimal:   63) --> SEGMENTATION VIOLATION (SEG0)
------------------------------------------------------------------------SOLUTION
VA  0: -> 17 ist in Seg0:  17 + 0 = 17 (physikalische Adresse)
VA  1: -> 108 ist in Seg1: 512 + (108 - 128) = 492 (physikalische Adresse)
VA  2: 97: Segmgentatin violation, da 97 in keinem Segment ist
VA  3: 32: Segmgentatin violation, da 53 in keinem Segment ist
VA  4: 63: Segmgentatin violation, da 33 in keinem Segment ist

_____________________________________________________________________________
segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 2

ARG seed 2
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x0000007a (decimal:  122) --> VALID in SEG1: 0x000001fa (decimal:  506)
  VA  1: 0x00000079 (decimal:  121) --> VALID in SEG1: 0x000001f9 (decimal:  505)
  VA  2: 0x00000007 (decimal:    7) --> VALID in SEG0: 0x00000007 (decimal:    7)
  VA  3: 0x0000000a (decimal:   10) --> VALID in SEG0: 0x0000000a (decimal:   10)
  VA  4: 0x0000006a (decimal:  106) --> SEGMENTATION VIOLATION (SEG1)
------------------------------------------------------------------------SOLUTION
VA  0: -> 122 ist in Seg1: 512 + (122 - 128) = 506 (physikalische Adresse)
VA  1: -> 121 ist in Seg1: 512 + (121 - 128) = 505 (physikalische Adresse)
VA  2: -> 7 ist in Seg0:   7 + 0 = 7 (physikalische Adresse)
VA  3: -> 10 ist in Seg0:  10 + 0 = 10 (physikalische Adresse)
VA  4: 106: Segmgentatin violation, da 33 in keinem Segment ist
_____________________________________________________________________________







2.
Now, let’s see if we understand this tiny address space we’ve constructed 
(using the parameters from the question above). 
What is the highest legal virtual address in segment 0? 
---------19

What about the lowest legal virtual address in segment 1?
---------108
 
What are the lowest and highest illegal addresses in this entire address space?
---------20 und 107


Finally, how would you run segmentation.py with the -A ﬂag to test if you are right?
----------------------------------
./segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -A 19,108,107,20 -c

ARG seed 0
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x00000013 (decimal:   19) --> VALID in SEG0: 0x00000013 (decimal:   19)
  VA  1: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  2: 0x0000006b (decimal:  107) --> SEGMENTATION VIOLATION (SEG1)
  VA  3: 0x00000014 (decimal:   20) --> SEGMENTATION VIOLATION (SEG0)








3.
Let’s say we have a tiny 16-byte address space in a 128-byte physical memory. 
What base and bounds would you set up so as to get the simulator to generate 
the following translation results for the speciﬁed address stream: 
valid, valid, violation, ..., violation, valid, valid? 
Assume the following parameters:
---------------------------------------------
If you want to get even more specific, you can set the base register and limit
register values yourself, with the --b0, --l0, --b1, and --l1 registers.
---------------------------------------------
./segmentation.py -a 16 -p 128 -A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 --b0 0 --l0 2 --b1 16 --l1 2 -c

-> -A gibt die virtuellen Adressen an
-> --b0 gibt den Beginn von Seg0 an
-> --b1 gibt das Ende von Seg1 an
->--l0 und --l1 gibt die Länge der Base an


ARG seed 0
ARG address space size 16
ARG phys mem size 128

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 2

  Segment 1 base  (grows negative) : 0x00000010 (decimal 16)
  Segment 1 limit                  : 2


Virtual Address Trace
  VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
  VA  1: 0x00000001 (decimal:    1) --> VALID in SEG0: 0x00000001 (decimal:    1)
  VA  2: 0x00000002 (decimal:    2) --> SEGMENTATION VIOLATION (SEG0)
  VA  3: 0x00000003 (decimal:    3) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x00000004 (decimal:    4) --> SEGMENTATION VIOLATION (SEG0)
  VA  5: 0x00000005 (decimal:    5) --> SEGMENTATION VIOLATION (SEG0)
  VA  6: 0x00000006 (decimal:    6) --> SEGMENTATION VIOLATION (SEG0)
  VA  7: 0x00000007 (decimal:    7) --> SEGMENTATION VIOLATION (SEG0)
  VA  8: 0x00000008 (decimal:    8) --> SEGMENTATION VIOLATION (SEG1)
  VA  9: 0x00000009 (decimal:    9) --> SEGMENTATION VIOLATION (SEG1)
  VA 10: 0x0000000a (decimal:   10) --> SEGMENTATION VIOLATION (SEG1)
  VA 11: 0x0000000b (decimal:   11) --> SEGMENTATION VIOLATION (SEG1)
  VA 12: 0x0000000c (decimal:   12) --> SEGMENTATION VIOLATION (SEG1)
  VA 13: 0x0000000d (decimal:   13) --> SEGMENTATION VIOLATION (SEG1)
  VA 14: 0x0000000e (decimal:   14) --> VALID in SEG1: 0x0000000e (decimal:   14)
  VA 15: 0x0000000f (decimal:   15) --> VALID in SEG1: 0x0000000f (decimal:   15)










4.
Assume we want to generate a problem where roughly 90% of the randomly-generated 
virtual addresses are valid (not segmentation violations). 
How should you conﬁgure the simulator to do so? 
Which parameters are important to getting this outcome?
---------------------------------------------










5.
Can you run the simulator such that no virtual addresses are valid? 
How?
----------------------------------------------


























