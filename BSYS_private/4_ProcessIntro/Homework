Virtualization - ProcessIntro (1)

1.
Run process-run.py with the following ﬂags: -l 5:100,5:100. What should the CPU utilization be (e.g., the percent of time the CPU is in use?) 
Why do you know this? Use the -c and -p ﬂags to see if you were right.
----------------
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu

Process 1
  cpu
  cpu
  cpu
  cpu
  cpu
-----------------
X:Y --> X = number of instructions that process should run
    --> Y = chances that an instruction will use the CPU or issue an IO
            but normally "RUNNING" is using the CPU.
-----------------
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2     RUN:cpu      READY          1            
  3     RUN:cpu      READY          1            
  4     RUN:cpu      READY          1            
  5     RUN:cpu      READY          1            
  6        DONE    RUN:cpu          1            
  7        DONE    RUN:cpu          1            
  8        DONE    RUN:cpu          1            
  9        DONE    RUN:cpu          1            
 10        DONE    RUN:cpu          1 




2.
Now run with these ﬂags: ./process-run.py -l 4:100,1:0. These ﬂags specify one process with 4 instructions (all to use the CPU), 
and one that simply issues an I/O and waits for it to be done. How long does it take to complete both processes? Use -c and -p to ﬁnd out if you were right.
-----------
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu

Process 1
  io
----------------
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2     RUN:cpu      READY          1            
  3     RUN:cpu      READY          1            
  4     RUN:cpu      READY          1            
  5        DONE     RUN:io          1            
  6        DONE    WAITING                     1 
  7        DONE    WAITING                     1 
  8        DONE    WAITING                     1 
  9        DONE    WAITING                     1 
 10*       DONE       DONE                       
----------------
WAITING: the process is waiting on I/O - waits I/O will be done
After the first process is done there will be a conetxt switch to start the second process.




3. 
Switch the order of the processes: -l 1:0,4:100. What happens now? Does switching the order matter? Why? 
(As always, use -c and -p to see if you were right).
----------------
Produce a trace of what would happen when you run these processes:
Process 0
  io

Process 1
  cpu
  cpu
  cpu
  cpu
---------------
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6*       DONE       DONE  
---------------
The first process is issuing an I/O. The second process is ready for running. The first process has to wait 
for the I/O to be done so that the second process has time to run on the CPU.




4. 
We’ll now explore some of the other ﬂags. One important ﬂag is -S, which determines how the system reacts 
when a process issues an I/O. With the ﬂag set to SWITCH ON END, the system will NOT switch to another process
while one is doing I/O, instead waiting until the process is completely ﬁnished. What happens when you run the 
following two processes (-l 1:0,4:100 -c -S SWITCH ON END), one doing I/O and the other doing CPU work?
---------------
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING      READY                    1            
  3     WAITING      READY                    1            
  4     WAITING      READY                    1            
  5     WAITING      READY                    1            
  6        DONE    RUN:CPU          1 
  7        DONE    RUN:CPU          1 
  8        DONE    RUN:CPU          1 
  9        DONE    RUN:CPU          1 
 10*       DONE    RUN:CPU          1
---------------
The first process issues an I/O. Because of SWITCH TO END there is no opportunity to switch to the second process.
So it will take some time to finally finish process number on. Finally being done, the second process starts.
Here it runs on the CPU but it will take its time as well to be finally done.
--> WAITING UNTIL THE END 
--> the system will only switch when the current process is done



5.
Now, run the same processes, but with the switching behavior set to switch to another process whenever one is
WAITING for I/O (-l 1:0,4:100 -c -S SWITCH ON IO). What happens now? Use -c and -p to conﬁrm that you are right.
---------------
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1
  3     WAITING    RUN:cpu          1          1
  4     WAITING    RUN:cpu          1          1
  5     WAITING    RUN:cpu          1          1
  6*       DONE       DONE
--------------
The first process issues an I/O. But now we don't have to wait until the first process is completly done.
So, the second process will start immediately after the first process goes into "WAITING".
--> the system will switch when a process issues an IO



6.
One other important behavior is what to do when an I/O completes. With -I IO RUN LATER, when an I/O completes,
the process that issued it is not necessarily run right away; rather, whatever was running at the time keeps running. 
What happens when you run this combination of processes? (Run ./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO RUN LATER -c -p) 
Are system resources being effectively utilized?
-----------------
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*      READY    RUN:cpu      READY      READY          1            
  7       READY       DONE    RUN:cpu      READY          1            
  8       READY       DONE    RUN:cpu      READY          1            
  9       READY       DONE    RUN:cpu      READY          1         
 10       READY       DONE    RUN:cpu      READY          1          
 11       READY       DONE    RUN:cpu      READY          1            
 12       READY       DONE       DONE    RUN:cpu          1            
 13       READY       DONE       DONE    RUN:cpu          1            
 14       READY       DONE       DONE    RUN:cpu          1            
 15       READY       DONE       DONE    RUN:cpu          1            
 16       READY       DONE       DONE    RUN:cpu          1            
 17      RUN:io       DONE       DONE       DONE          1            
 18     WAITING       DONE       DONE       DONE                     1 
 19     WAITING       DONE       DONE       DONE                     1 
 20     WAITING       DONE       DONE       DONE                     1 
 21     WAITING       DONE       DONE       DONE                     1 
 22*     RUN:io       DONE       DONE       DONE          1            
 23     WAITING       DONE       DONE       DONE                     1 
 24     WAITING       DONE       DONE       DONE                     1 
 25     WAITING       DONE       DONE       DONE                     1 
 26     WAITING       DONE       DONE       DONE                     1 
 27*       DONE       DONE       DONE       DONE                       
------------------
Run all the other I/O processes when all other processes are done.



7.
Now run the same processes, but with -I IO RUN IMMEDIATE set, which immediately runs the process that issued the I/O.
How does this behavior differ? Why might running a process that just completed an I/O again be a good idea?
---------------------
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*     RUN:io      READY      READY      READY          1            
  7     WAITING    RUN:cpu      READY      READY          1          1 
  8     WAITING       DONE    RUN:cpu      READY          1          1 
  9     WAITING       DONE    RUN:cpu      READY          1          1 
 10     WAITING       DONE    RUN:cpu      READY          1          1 
 11*     RUN:io       DONE      READY      READY          1            
 12     WAITING       DONE    RUN:cpu      READY          1          1 
 13     WAITING       DONE    RUN:cpu      READY          1          1 
 14     WAITING       DONE       DONE    RUN:cpu          1          1 
 15     WAITING       DONE       DONE    RUN:cpu          1          1 
 16*       DONE       DONE       DONE    RUN:cpu          1            
 17        DONE       DONE       DONE    RUN:cpu          1            
 18        DONE       DONE       DONE    RUN:cpu          1    
-------------------
Now all I/O processes are in focus and should be done asap. So after one process is done, I/O will be run again, 
another process will run after I/O done and then I/O will run again - and so on.   







8.
Now run with some randomly generated processes: -s 1 -l 3:50,3:50 or -s 2 -l 3:50,3:50 or -s 3 -l 3:50,3:50.
See if you can predict how the trace will turn out. What happens when you use theﬂag -I IO RUN IMMEDIATE vs. -I IO RUN LATER?
What happens when you use -S SWITCH ON IO vs. -S SWITCH ON END?