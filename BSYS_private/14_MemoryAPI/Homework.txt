Memory API - Homeworks



1.
First, write a simple program called null.c that creates a pointer to an integer, sets it to NULL, 
and then tries to dereference it. Compile this into an executable called null. 
What happens when you run this program?
-----------------------------------------------
Dereferenzieren: *
--------------------------------------------
Segmentation fault (core dumped)





2.
Next,compile this program with symbol information included (with the -g ﬂag). 
Doing so let’s put more information into the executable, enabling the debugger to access more useful information about variable names and the like. 
Run the program under the debugger by typing gdb null and then, once gdb is running, typing run. 
What does gdb show you?
--------------------------------------------------------------------
gdb = GNU Debugger
-> GDB, the GNU Project debugger, allows you to see what is going on `inside' another program while it executes 
   or what another program was doing at the moment it crashed. 
---------------------------------------------------------------------
Reading symbols from null...(no debugging symbols found)...done.
(gdb) run
Starting program: /media/sf_VM/Semester5/MemoryAPI/null 

Program received signal SIGSEGV, Segmentation fault.
0x000055555555465e in main ()
(gdb) 





3.
Finally, use the valgrind tool on this program. We’ll use the memcheck tool that is a part of valgrind to analyze what happens. 
Run this by typing in the following: valgrind --leak-check=yes null. 
What happens when you run this? 
Can you interpret the output from the tool?
-----------------------------------------------------------------
valgrind: Werkzeigsammlung zu Debuggen, Profile und zur dynamischen Fehleranalyse von Programmen
Werkzeuge:
  - memcheck: wichtigste Tool für das Debuggen
-------------------------------------------------------------------
==1944== Memcheck, a memory error detector
==1944== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1944== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==1944== Command: ./null
==1944== 
==1944== Invalid read of size 4
==1944==    at 0x10865E: main (in /media/sf_VM/Semester5/MemoryAPI/null)
==1944==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1944== 
==1944== 
==1944== Process terminating with default action of signal 11 (SIGSEGV)
==1944==  Access not within mapped region at address 0x0
==1944==    at 0x10865E: main (in /media/sf_VM/Semester5/MemoryAPI/null)
==1944==  If you believe this happened as a result of a stack
==1944==  overflow in your program's main thread (unlikely but
==1944==  possible), you can try to increase the size of the
==1944==  main thread stack using the --main-stacksize= flag.
==1944==  The main thread stack size used in this run was 8388608.
==1944== 
==1944== HEAP SUMMARY:
==1944==     in use at exit: 0 bytes in 0 blocks
==1944==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==1944== 
==1944== All heap blocks were freed -- no leaks are possible
==1944== 
==1944== For counts of detected and suppressed errors, rerun with: -v
==1944== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)







4.
Write a simple program that allocates memory using malloc() but forgets to free it before exiting. 
What happens when this program runs? 
Can you use gdb to ﬁnd any problems with it? 
How about valgrind (again with the --leak-check=yes ﬂag)?
----------------------------------------------------------------------------valgrind
==2020== Memcheck, a memory error detector
==2020== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2020== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2020== Command: ./ex4
==2020== 
==2020== 
==2020== HEAP SUMMARY:
==2020==     in use at exit: 4 bytes in 1 blocks
==2020==   total heap usage: 1 allocs, 0 frees, 4 bytes allocated
==2020== 
==2020== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2020==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2020==    by 0x10865B: main (in /media/sf_VM/Semester5/MemoryAPI/ex4)
==2020== 
==2020== LEAK SUMMARY:
==2020==    definitely lost: 4 bytes in 1 blocks
==2020==    indirectly lost: 0 bytes in 0 blocks
==2020==      possibly lost: 0 bytes in 0 blocks
==2020==    still reachable: 0 bytes in 0 blocks
==2020==         suppressed: 0 bytes in 0 blocks
==2020== 
==2020== For counts of detected and suppressed errors, rerun with: -v
==2020== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
-----------------------------------------------------------------------------gdb
Reading symbols from ex4...(no debugging symbols found)...done.
(gdb) run
Starting program: /media/sf_VM/Semester5/MemoryAPI/ex4 
[Inferior 1 (process 2024) exited normally]










5.
Write a program that creates an array of integers called data of size 100 using malloc(); 
then, set data[100] to zero. 
What happens when you run this program? 
What happens when you run this program using valgrind? 
Is the program correct?
-----------------------------------------------------------
==2050== Memcheck, a memory error detector
==2050== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2050== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2050== Command: ./ex5
==2050== 
==2050== Invalid write of size 4
==2050==    at 0x1086BB: main (in /media/sf_VM/Semester5/MemoryAPI/ex5)
==2050==  Address 0x522d1d0 is 0 bytes after a block of size 400 alloc'd
==2050==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2050==    by 0x10869B: main (in /media/sf_VM/Semester5/MemoryAPI/ex5)
==2050== 
==2050== 
==2050== HEAP SUMMARY:
==2050==     in use at exit: 0 bytes in 0 blocks
==2050==   total heap usage: 1 allocs, 1 frees, 400 bytes allocated
==2050== 
==2050== All heap blocks were freed -- no leaks are possible
==2050== 
==2050== For counts of detected and suppressed errors, rerun with: -v
==2050== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)







6.
Create a program that allocates an array of integers (as above), frees them, and then tries 
to print the value of one of the elements of the array. 
Does the program run? 
What happens when you use valgrind on it?
----------------------------------------------
output: 0
----------------------------------------------valgrind
==2101== Memcheck, a memory error detector
==2101== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2101== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2101== Command: ./ex6
==2101== 
==2101== Invalid write of size 4
==2101==    at 0x10870B: main (in /media/sf_VM/Semester5/MemoryAPI/ex6)
==2101==  Address 0x522d1d0 is 0 bytes after a block of size 400 alloc'd
==2101==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2101==    by 0x1086EB: main (in /media/sf_VM/Semester5/MemoryAPI/ex6)
==2101== 
==2101== Invalid read of size 4
==2101==    at 0x108721: main (in /media/sf_VM/Semester5/MemoryAPI/ex6)
==2101==  Address 0x522d040 is 0 bytes inside a block of size 400 free'd
==2101==    at 0x4C30D3B: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2101==    by 0x10871C: main (in /media/sf_VM/Semester5/MemoryAPI/ex6)
==2101==  Block was alloc'd at
==2101==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2101==    by 0x1086EB: main (in /media/sf_VM/Semester5/MemoryAPI/ex6)
==2101== 
0
==2101== 
==2101== HEAP SUMMARY:
==2101==     in use at exit: 0 bytes in 0 blocks
==2101==   total heap usage: 2 allocs, 2 frees, 1,424 bytes allocated
==2101== 
==2101== All heap blocks were freed -- no leaks are possible
==2101== 
==2101== For counts of detected and suppressed errors, rerun with: -v
==2101== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)







7.
Now pass a funny value to free (e.g., a pointer in the middle of the array you allocated above). 
What happens? 
Do you need tools to ﬁnd this type of problem?
---------------------------------------------------
free(): invalid pointer
Aborted (core dumped)
---------------------------------------------------valgrind
==2114== Memcheck, a memory error detector
==2114== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2114== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2114== Command: ./ex7
==2114== 
==2114== Invalid write of size 4
==2114==    at 0x1086BB: main (in /media/sf_VM/Semester5/MemoryAPI/ex7)
==2114==  Address 0x522d1d0 is 0 bytes after a block of size 400 alloc'd
==2114==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2114==    by 0x10869B: main (in /media/sf_VM/Semester5/MemoryAPI/ex7)
==2114== 
==2114== Invalid free() / delete / delete[] / realloc()
==2114==    at 0x4C30D3B: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2114==    by 0x1086D2: main (in /media/sf_VM/Semester5/MemoryAPI/ex7)
==2114==  Address 0x522d108 is 200 bytes inside a block of size 400 alloc'd
==2114==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2114==    by 0x10869B: main (in /media/sf_VM/Semester5/MemoryAPI/ex7)
==2114== 
==2114== 
==2114== HEAP SUMMARY:
==2114==     in use at exit: 400 bytes in 1 blocks
==2114==   total heap usage: 1 allocs, 1 frees, 400 bytes allocated
==2114== 
==2114== 400 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2114==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2114==    by 0x10869B: main (in /media/sf_VM/Semester5/MemoryAPI/ex7)
==2114== 
==2114== LEAK SUMMARY:
==2114==    definitely lost: 400 bytes in 1 blocks
==2114==    indirectly lost: 0 bytes in 0 blocks
==2114==      possibly lost: 0 bytes in 0 blocks
==2114==    still reachable: 0 bytes in 0 blocks
==2114==         suppressed: 0 bytes in 0 blocks
==2114== 
==2114== For counts of detected and suppressed errors, rerun with: -v
==2114== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
isa@isa-VirtualBox:/media/sf_VM/Semester5/MemoryAPI$ 







9.
Spend more time and read about using gdb and valgrind. Knowing your tools is critical;
spend the time and learn how to become an expert debugger in the UNIX and C environment.





