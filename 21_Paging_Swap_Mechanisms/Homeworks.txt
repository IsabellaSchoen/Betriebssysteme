Homeworks - Swapping:Mechanisms


Procs
       r: The number of runnable processes (running or waiting for run time).
       b: The number of processes in uninterruptible sleep.

   Memory
       swpd: the amount of virtual memory used.
       free: the amount of idle memory.
       buff: the amount of memory used as buffers.
       cache: the amount of memory used as cache.
       inact: the amount of inactive memory.  (-a option)
       active: the amount of active memory.  (-a option)

   Swap
       si: Amount of memory swapped in from disk (/s).
       so: Amount of memory swapped to disk (/s).

   IO
       bi: Blocks received from a block device (blocks/s).
       bo: Blocks sent to a block device (blocks/s).

   System
       in: The number of interrupts per second, including the clock.
       cs: The number of context switches per second.

   CPU
       These are percentages of total CPU time.
       us: Time spent running non-kernel code.  (user time, including nice time)
       sy: Time spent running kernel code.  (system time)
       id: Time spent idle.  Prior to Linux 2.5.41, this includes IO-wait time.
       wa: Time spent waiting for IO.  Prior to Linux 2.5.41, included in idle.
Procs
       r: The number of runnable processes (running or waiting for run time).
       b: The number of processes in uninterruptible sleep.

   Memory
       swpd: the amount of virtual memory used.
       free: the amount of idle memory.
       buff: the amount of memory used as buffers.
       cache: the amount of memory used as cache.
       inact: the amount of inactive memory.  (-a option)
       active: the amount of active memory.  (-a option)

   Swap
       si: Amount of memory swapped in from disk (/s).
       so: Amount of memory swapped to disk (/s).

   IO
       bi: Blocks received from a block device (blocks/s).
       bo: Blocks sent to a block device (blocks/s).

   System
       in: The number of interrupts per second, including the clock.
       cs: The number of context switches per second.

   CPU
       These are percentages of total CPU time.
       us: Time spent running non-kernel code.  (user time, including nice time)
       sy: Time spent running kernel code.  (system time)
       id: Time spent idle.  Prior to Linux 2.5.41, this includes IO-wait time.
       wa: Time spent waiting for IO.  Prior to Linux 2.5.41, included in idle.
Procs
       r: The number of runnable processes (running or waiting for run time).
       b: The number of processes in uninterruptible sleep.

   Memory
       swpd: the amount of virtual memory used.
       free: the amount of idle memory.
       buff: the amount of memory used as buffers.
       cache: the amount of memory used as cache.
       inact: the amount of inactive memory.  (-a option)
       active: the amount of active memory.  (-a option)

   Swap
       si: Amount of memory swapped in from disk (/s).
       so: Amount of memory swapped to disk (/s).

   IO
       bi: Blocks received from a block device (blocks/s).
       bo: Blocks sent to a block device (blocks/s).

   System
       in: The number of interrupts per second, including the clock.
       cs: The number of context switches per second.

   CPU
       These are percentages of total CPU time.
       us: Time spent running non-kernel code.  (user time, including nice time)
       sy: Time spent running kernel code.  (system time)
       id: Time spent idle.  Prior to Linux 2.5.41, this includes IO-wait time.
       wa: Time spent waiting for IO.  Prior to Linux 2.5.41, included in idle.
       st: Time stolen from a virtual machine.  Prior to Linux 2.6.11, unknown.






1.
First, open two separate terminal connections to the same machine, so that you can easily run something in one window and the other.

Now, in one window, run vmstat 1, which shows statistics about machine usage every second. 
Read the man page, the associated README, and any other information you need so that you can understand its output. 
Leave this window running vmstat for the rest of the exercises below.

Now, we will run the program mem.c but with very little memory usage. This can be accomplished by typing ./mem 1 
(which uses only 1 MB of memory). 
How do the CPU usage statistics change when running mem? 
Do the numbers in the user time column make sense? 
How does this change when running more than one instance of mem at once?

-----------------------------------------------------------------------------------------------SOLUTION

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0      0 2135664  93772 974216    0    0   204    28  148  269  5  1 94  0  0
 0  0      0 2135664  93772 974216    0    0     0     0  517  921  3  2 95  0  0
 1  0      0 2135664  93772 974216    0    0     0     0  998 1621  9  4 87  0  0
 1  0      0 2134548  93772 974216    0    0     0     0  341  461  9  2 89  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  653  546 53  1 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  770  664 54  1 45  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  727  664 53  0 47  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  665  579 53  0 47  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  673  601 54  0 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  682  593 54  1 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  685  566 53  1 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  677  598 53  1 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  671  540 54  0 46  0  0
 1  0      0 2134540  93772 974216    0    0     0     0  708  651 54  1 46  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  657  584 53  1 46  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  682  557 53  1 46  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  663  541 53  0 47  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  666  543 53  1 46  0  0
 2  0      0 2134416  93772 974216    0    0     0     0  666  527 54  0 46  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  664  543 53  1 47  0  0
 1  0      0 2134416  93772 974216    0    0     0     0  644  541 53  1 47  0  0
 1  0      0 2134416  93772 974216    0    0     0    12  717  631 54  1 46  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  653  530 54  1 46  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  646  531 53  1 47  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  644  527 54  0 46  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  652  547 53  1 46  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  660  618 54  1 46  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  642  541 54  0 46  0  0
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0      0 2134292  93772 974216    0    0     0     0  664  534 53  0 47  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  672  548 53  0 47  0  0
 1  0      0 2134292  93772 974216    0    0     0     0  658  542 54  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  691  608 55  1 44  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  655  531 53  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  651  534 53  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  661  527 54  0 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  670  572 53  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  662  617 54  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  644  535 53  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  692  611 53  0 47  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  715  681 54  1 46  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  742  800 56  2 43  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  815 1032 55  1 44  0  0
 1  0      0 2134168  93772 974216    0    0     0     0  687  850 53  2 46  0  0
 0  0      0 2134868  93772 974216    0    0     0     0  662 1047  9  4 87  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  797 1311  6  3 91  0  0
 0  0      0 2134424  93772 974216    0    0     0     0 1206 1756 10  3 87  0  0
 1  0      0 2134424  93772 974216    0    0     0     0  688 1219  6  3 91  0  0
 0  0      0 2134548  93772 974216    0    0     0     0  393  588  4  1 95  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  480  647  7  1 92  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  304  645  4  1 95  0  0
 2  0      0 2134672  93772 974216    0    0     0     0  318  431  3  1 96  0  0
 0  1      0 2134672  93772 974216    0    0     0     0  241  378  3  1 96  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  120  208  1  1 99  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  302  685  7  1 92  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  437  640  6  1 93  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  263  315  2  1 97  0  0
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0      0 2134672  93772 974216    0    0     0     0  193  248  1  1 99  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  634  944  5  3 93  0  0
 0  0      0 2134672  93772 974216    0    0     0     0 1043 1508  8  3 89  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  252  613  2  1 98  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  319  587  4  2 94  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  758 1214  6  2 92  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  856 1374  2  3 95  0  0
 1  0      0 2134672  93772 974216    0    0     0     0  514 1091  2  2 96  0  0
 0  0      0 2134672  93772 974216    0    0     0     0  623 1716  4  3 93  0  0
 0  0      0 2134548  93772 974216    0    0     0     0  552 1161  6  2 92  0  0
 0  0      0 2134548  93772 974216    0    0     0     0  479  831  6  1 93  0  0
 0  0      0 2134548  93772 974216    0    0     0     0  520  923  5  2 93  0  0





2.
Let’s now start looking at some of the memory statistics while running mem. 
We’ll focus on two columns: swpd (the amount of virtual memory used) and free (the amount of idle memory). 
Run ./mem 1024 (whichallocates1024 MB) and watch how these values change. 
Then kill the running program (by typing control-c) and watch again how the values change. 
What do you notice about the values? 
In particular, how does the free column change when the program exits? 
Does the amount of free memory increase by the expected amount when mem exits?

----------------------------------------------------------------------------------------------SOLUTION
__________________________________________________________________________________________./mem 1024
free gets less, almost the half: 2.053.224 -> 1.003.680

r  b   	swpd   free   buff  cache     si   so    bi    bo   in   cs   us   sy   id     wa st
21  0      0 2053224  93996 1004068    0    0     0     0   443  751   9    3    88    0  0
 2  0      0 2053100  93996 1004068    0    0     0     0   767  1233  13   6    82    0  0
 0  0      0 2053100  93996 1004068    0    0     0     0   1117 1779  11   6    83    0  0
 1  0      0 2053100  94004 1004068    0    0     0    44   1162 1772   9   5    87    0  0
 1  0      0 2052976  94004 1004068    0    0     0    32   748  951   11   4    85    0  0
 1  0      0 2053348  94004 1004068    0    0     0     0   1048 1733  9    6    85    0  0
 0  0      0 2053348  94004 1004068    0    0     0     0   1437 2485  11   7    82    0  0
 0  0      0 2053348  94004 1004068    0    0     0     0    556  901  6    2    92    0  0
 0  0      0 2053348  94004 1004068    0    0     0     0    312  398  3    1    96    0  0
 1  0      0 1512452  94012 1004060    0    0     0    44    468  487  10   9    82    0  0
 1  0      0 1003556  94012 1004068    0    0     0     0    632  537  37   17   46    0  0
 1  0      0 1003556  94012 1004068    0    0     0     0    658  487  54   1    46    0  0
 1  0      0 1003656  94012 1004068    0    0     0     0    689  624  55   0    45    0  0
 3  0      0 1003680  94012 1004060    0    0     0     0    630  586  54   1    45    0  0
 1  0      0 1003680  94012 1004060    0    0     0     4    635  489  54   1    45    0  0
 1  0      0 1003680  94012 1004060    0    0     0     0    605  479  54   1    45    0  0

_____________________________________________________________________________________________./mem 2048

 0  0      0 2053092  94084 1004192    0    0     0     0  112  215  2  1 97  0  0
 0  0      0 2053092  94084 1004192    0    0     0     0  140  246  2  1 97  0  0
 0  0      0 2053092  94084 1004192    0    0     0     0  349  461  3  2 95  0  0
 0  0      0 2053092  94084 1004192    0    0     0     0  707 1090  5  3 92  0  0
 0  0      0 2053092  94084 1004192    0    0     0     0  247  337  2  1 97  0  0
 0  0      0 2053092  94084 1004192    0    0     0     0  239  434  3  1 96  0  0
 1  0      0 2053092  94084 1004192    0    0     0     0  250  347  2  1 98  0  0
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0      0 1935656  94084 1004192  0    0     0     0  351  473  4  4 93  0  0
 1  0      0 762368  94084 1004192   0    0     0     0  553  252 20 30 49  0  0
 1  0      0 301708  94084 1004192   0    0     0     0  517  280 17 35 48  0  0
 2  0      0 119560  93096 838668    0    0     0     0  648  521 36 20 45  0  0
 1  0      0 119128  93096 838576    0    0     0     0  630  358 52  0 48  0  0
 2  0      0 116976  93096 838576    0    0     0     0  788 2993 59  1 40  0  0
 1  0      0 117020  93096 838576    0    0     0     0  692 2418 53  2 45  0  0
 1  0      0 117020  93096 838576    0    0     0     0  663  366 52  1 47  0  0
 1  0      0 117020  93096 838576    0    0     0     0  661  396 52  1 47  0  0







3.
We’ll next look at the swap columns (si and so), which indicate how much swapping is taking place to and from the disk. 
Of course, to activate these, you’ll need to run mem with large amounts of memory. 
First, examine how much free memory is on your Linux system (for example, by typing cat /proc/meminfo; 
type man proc for details on the /proc ﬁle system and the types of information you can ﬁnd there). 
One of the ﬁrst entries in /proc/meminfo is the total amount of memory in your system. 
Let’s assume it’s something like 8 GB of memory; if so, start by running mem 4000 (about 4 GB) and watching the swap 
in/out columns. Do they ever give non-zero values? Then, try with 5000, 6000, etc. 
What happens to these values as the program enters the second loop (and beyond), as compared to the ﬁrst loop? 
How much data (total) are swapped in and out during the second, third, and subsequent loops? (do the numbers make sense?)

--------------------------------------------------------------------------------------------------SOLUTION

______________________________________________________________________________________./mem 4000

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 2215956  93300 846512    0    0     0     0  199  414  2  2 97  0  0
 0  0      0 2215956  93300 846512    0    0     0     0  223  622  4  1 95  0  0
 1  0      0 2215956  93300 846512    0    0     0     0  266  458  2  1 97  0  0
 0  0      0 2215956  93300 846512    0    0     0     0  244  410  3  2 96  0  0
 0  0      0 2215956  93300 846512    0    0     0     0  316  579  2  1 97  0  0
 0  0      0 2215956  93300 846512    0    0     0     0  290  435  2  1 97  0  0
 0  0      0 2215956  93300 846512    0    0     0     0  188  287  1  1 98  0  0
 1  0      0 668056  93300 846512    0    0     0     0  673  655 21 23 56  0  0
 1  5 109324  85280    152 161548    0 108820 10680 108820 1353 1711 15 50 24 12  0
 0  2 315392  99852    152 178364  216 206300 34880 206300 1497 1661  3 19 19 59  0
 1  2 466188  88068    152 174024   96 150948 12676 150948  986 1400  3 17  6 75  0
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  1 693772 123892    764 171320  640 227336  2452 227336 1423 1492  4 17  9 70  0
 2  0 868864  84648    160 169232  652 175600  3332 175600 21746 1682 14 60  3 24  0
 2  0 1030656  84572   1440 170344  152 161736  4728 161736 25770 2477 12 71  1 16  0
16  6 1177600  86552   1576 172284 1952 148876  4196 148876 16378 2220  9 64  1 25  0
 0  6 1311860  87116   1464 178232 22316 156360 31216 156360 11122 6642  5 53  0 42  0
 2  2 1301156  84620    384 179172 41960 30816 46844 30816 4076 6679  2 28  0 70  0
 0  7 1321984  84456    520 182240 45520 65908 49552 65912 3251 6152  1 23  0 75  0
 0  3 1323520  85724    488 189628 35724 36492 45220 36500 5469 7645  1 21  0 78  0
 0  5 1329920  87128   1320 190908 37260 43100 42812 43116 5994 8497  3 17  0 80  0
 0  1 1329920 119992   1252 191052 43508 43444 44004 43444 4277 6192  3 16 23 58  0

--> swpd becomes enormous big
--> free is always changing



___________________________________________________________________________
cat /proc/meminfo

MemTotal:        4039564 kB
MemFree:         2902220 kB
MemAvailable:    3267880 kB
Buffers:           40576 kB
Cached:           527576 kB
SwapCached:            0 kB
Active:           546328 kB
Inactive:         448324 kB
Active(anon):     427264 kB
Inactive(anon):    19872 kB
Active(file):     119064 kB
Inactive(file):   428452 kB
Unevictable:           0 kB
Mlocked:               0 kB
SwapTotal:       1459804 kB
SwapFree:        1459804 kB
Dirty:                 0 kB
Writeback:             0 kB
AnonPages:        426528 kB
Mapped:           178512 kB
Shmem:             20640 kB
Slab:              65768 kB
SReclaimable:      42252 kB
SUnreclaim:        23516 kB
KernelStack:        5408 kB
PageTables:        26152 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:     3479584 kB
Committed_AS:    2538972 kB
VmallocTotal:   34359738367 kB
VmallocUsed:           0 kB
VmallocChunk:          0 kB
HardwareCorrupted:     0 kB
AnonHugePages:         0 kB
ShmemHugePages:        0 kB
ShmemPmdMapped:        0 kB
CmaTotal:              0 kB
CmaFree:               0 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:      128960 kB
DirectMap2M:     4065280 kB


--> it is getting slower. Because there is not too much free space, the OS has to manage
swapping out of and in the memory. 
--> swap-in-out of pages that store the array counts as well






4.
Do the same experiments as above, but now watch the other statistics (such as CPU utilization, and block I/O statistics). 
How do they change when mem is running?

-----------------------------------------------------------------------------------------------SOLUTION

it starts raising
CPU doesn't really change






5.
Now let’s examine performance. Pick an input for mem that comfortably ﬁts in memory 
(say 4000 if the amount of memory on the system is 8 GB). 
How long does loop 0 take (and subsequent loops 1, 2, etc.)? 
Now pick a size comfortably beyond the size of memory (say 12000 again assuming 8 GB of memory). 
How long do the loops take here? 
How do the bandwidth numbers compare? 
How different is performance when constantly swapping versus ﬁtting everything comfortably in memory? 
Can you make a graph, with the size of memory used by mem on the x-axis, and the bandwidth of accessing said memory on the y-axis? 
Finally, how does the performance of the ﬁrst loop compare to that of subsequent loops, for both the case where everything ﬁts in 
memory and where it doesn’t?

-------------------------------------------------------------------------------------------------SOLUTION
______________________________________________________________./mem 1024

allocating 1073741824 bytes (1024.00 MB)
  number of integers in array: 268435456
loop 0 in 568.68 ms (bandwidth: 1800.67 MB/s)
loop 1 in 235.01 ms (bandwidth: 4357.30 MB/s)
loop 2 in 229.31 ms (bandwidth: 4465.53 MB/s)
loop 3 in 258.39 ms (bandwidth: 3963.06 MB/s)
loop 4 in 228.25 ms (bandwidth: 4486.37 MB/s)
loop 5 in 233.76 ms (bandwidth: 4380.52 MB/s)
loop 6 in 239.19 ms (bandwidth: 4281.03 MB/s)
loop 7 in 232.90 ms (bandwidth: 4396.81 MB/s)
loop 8 in 237.39 ms (bandwidth: 4313.61 MB/s)
loop 9 in 226.26 ms (bandwidth: 4525.74 MB/s)
loop 10 in 222.13 ms (bandwidth: 4609.92 MB/s)

_________________________________________________________________./mem 200

allocating 209715200 bytes (200.00 MB)
  number of integers in array: 52428800
loop 0 in 122.35 ms (bandwidth: 1634.70 MB/s)
loop 4 in 42.59 ms (bandwidth: 4696.26 MB/s)
loop 9 in 41.23 ms (bandwidth: 4850.62 MB/s)
loop 14 in 39.98 ms (bandwidth: 5002.00 MB/s)
loop 19 in 42.19 ms (bandwidth: 4740.45 MB/s)
loop 24 in 48.90 ms (bandwidth: 4089.63 MB/s)
loop 28 in 43.54 ms (bandwidth: 4593.78 MB/s)
loop 32 in 58.79 ms (bandwidth: 3402.18 MB/s)
loop 37 in 63.37 ms (bandwidth: 3156.16 MB/s)
loop 41 in 51.17 ms (bandwidth: 3908.17 MB/s)
loop 46 in 41.86 ms (bandwidth: 4777.71 MB/s)
loop 51 in 41.41 ms (bandwidth: 4830.20 MB/s)
loop 56 in 46.26 ms (bandwidth: 4323.00 MB/s)
loop 61 in 47.84 ms (bandwidth: 4180.42 MB/s)
loop 66 in 56.65 ms (bandwidth: 3530.34 MB/s)
loop 71 in 41.34 ms (bandwidth: 4837.69 MB/s)
loop 76 in 41.17 ms (bandwidth: 4858.00 MB/s)

______________________________________________________________________./mem 2500

allocating 209715200 bytes (200.00 MB)
  number of integers in array: 52428800
loop 0 in 122.35 ms (bandwidth: 1634.70 MB/s)
loop 4 in 42.59 ms (bandwidth: 4696.26 MB/s)
loop 9 in 41.23 ms (bandwidth: 4850.62 MB/s)
loop 14 in 39.98 ms (bandwidth: 5002.00 MB/s)
loop 19 in 42.19 ms (bandwidth: 4740.45 MB/s)
loop 24 in 48.90 ms (bandwidth: 4089.63 MB/s)
loop 28 in 43.54 ms (bandwidth: 4593.78 MB/s)
loop 32 in 58.79 ms (bandwidth: 3402.18 MB/s)
loop 37 in 63.37 ms (bandwidth: 3156.16 MB/s)
loop 41 in 51.17 ms (bandwidth: 3908.17 MB/s)
loop 46 in 41.86 ms (bandwidth: 4777.71 MB/s)
loop 51 in 41.41 ms (bandwidth: 4830.20 MB/s)
loop 56 in 46.26 ms (bandwidth: 4323.00 MB/s)
loop 61 in 47.84 ms (bandwidth: 4180.42 MB/s)
loop 66 in 56.65 ms (bandwidth: 3530.34 MB/s)
loop 71 in 41.34 ms (bandwidth: 4837.69 MB/s)
loop 76 in 41.17 ms (bandwidth: 4858.00 MB/s)


























