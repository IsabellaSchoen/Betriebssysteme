HOMEWORKS


  -h, --help            show this help message and exit
  -s SEED, --seed=SEED  the random seed
  -A ADDRESSES, --addresses=ADDRESSES
                        a set of comma-separated pages to access; -1 means
                        randomly generate
  -a ASIZE, --asize=ASIZE
                        address space size (e.g., 16, 64k, 32m, 1g)
  -p PSIZE, --physmem=PSIZE
                        physical memory size (e.g., 16, 64k, 32m, 1g)
  -n NUM, --numaddrs=NUM
                        number of virtual addresses to generate
  -b BASE0, --b0=BASE0  value of segment 0 base register
  -l LEN0, --l0=LEN0    value of segment 0 limit register
  -B BASE1, --b1=BASE1  value of segment 1 base register
  -L LEN1, --l1=LEN1    value of segment 1 limit register
  -c                    compute answers for me







Lösung für die Aufgabe 1:
 - wir haben zwei Segemente, die jeweils 20 Byte lang sind
 - Seg 0 beginnt bei 0 und geht bis 19
 - Seg 1 beginnt bei 492 und geht bis 511
 - nun müssen wir uns dies mit dem address space 128 vorstellen 
 - somit geht Seg0 von 0-19 und Seg1 108-128
 - nun haben wir eine virtuelle Adresse: x 
 - und wir haben den address space: 128
 - und die Segmente mit Anfang und Ende
 - für jedes Segment gibt es unterschiedliche Rechnungen
     - # seg 1: paddr = nbase1 + (vaddr - asize) -----> aus dem Code
                physikalische Adresse = das Ende von Seg1 + (virtuelle Adresse - address space)
     - # seg 0: paddr = vaddr + base0 ------> aus dem Code
                physikalische Adresse = virtuelle Adresse + Anfang von Seg0

_______________________________________________________________________________________________________________________________________
asize = address size

if (vaddr >= (asize / 2)): ----> virtual address >= 128/2
            # seg 1
            paddr = nbase1 + (vaddr - asize) -----> physical address: BeginnBase1 + (virtuelle Adresse - Adressraum)
            if paddr < base1:
                print '  VA %2d: 0x%08x (decimal: %4d) --> SEGMENTATION VIOLATION (SEG1)' % (i, vaddr, vaddr)
            else:
                print '  VA %2d: 0x%08x (decimal: %4d) --> VALID in SEG1: 0x%08x (decimal: %4d)' % (i, vaddr, vaddr, paddr, paddr)
        else:
            # seg 0
            if (vaddr >= len0): ------> virtuelle Adresse >= Länge von Base0
                print '  VA %2d: 0x%08x (decimal: %4d) --> SEGMENTATION VIOLATION (SEG0)' % (i, vaddr, vaddr)
            else:
                paddr = vaddr + base0
                print '  VA %2d: 0x%08x (decimal: %4d) --> VALID in SEG0: 0x%08x (decimal: %4d)' % (i, vaddr, vaddr, paddr, paddr)
_______________________________________________________________________________________________________________________________________




1)
1.1)
./segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 0
-----------------------------------------------------------------------------
128 -> address space size
512 -> pyhsical memory size [0;511] 512 ist somit nicht mehr drinnen
0   -> value of segment0 base register  - start = 0
20  -> value of segment0 limit register - size = 20
512 -> value of segment1 base register  - start = 512
20  -> value of segment1 limit register - size = 20
-----------------------------------------------------------------------------
ARG seed 0
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  1: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
  VA  2: 0x00000035 (decimal:   53) --> SEGMENTATION VIOLATION (SEG0)
  VA  3: 0x00000021 (decimal:   33) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x00000041 (decimal:   65) --> SEGMENTATION VIOLATION (SEG1)
-----------------------------------------------------------------------------
VA  0: 108 --> 1101100 --> Segmenation1 ------> 108 ist in Seg1: 512 + (108 - 128) = 492 (physikalische Adresse)
VA  1: 97: Segmgentatin violation, da 97 in keinem Segment ist
VA  2: 53: Segmgentatin violation, da 53 in keinem Segment ist
VA  3: 33: Segmgentatin violation, da 33 in keinem Segment ist
VA  4: 65: Segmgentatin violation, da 65 in keinem Segment ist


1.2)
./segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 1 -c
ARG seed 1
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x00000011 (decimal:   17) --> VALID in SEG0: 0x00000011 (decimal:   17)
  VA  1: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  2: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
  VA  3: 0x00000020 (decimal:   32) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x0000003f (decimal:   63) --> SEGMENTATION VIOLATION (SEG0)
-----------------------------------------------------------------------------
VA  0: -> 17 ist in Seg0:  17 + 0 = 17 (physikalische Adresse)
VA  1: -> 108 ist in Seg1: 512 + (108 - 128) = 492 (physikalische Adresse)
VA  2: 97: Segmgentatin violation, da 97 in keinem Segment ist
VA  3: 32: Segmgentatin violation, da 53 in keinem Segment ist
VA  4: 63: Segmgentatin violation, da 33 in keinem Segment ist



1.3)
./segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -s 2 -c
ARG seed 2
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x0000007a (decimal:  122) --> VALID in SEG1: 0x000001fa (decimal:  506)
  VA  1: 0x00000079 (decimal:  121) --> VALID in SEG1: 0x000001f9 (decimal:  505)
  VA  2: 0x00000007 (decimal:    7) --> VALID in SEG0: 0x00000007 (decimal:    7)
  VA  3: 0x0000000a (decimal:   10) --> VALID in SEG0: 0x0000000a (decimal:   10)
  VA  4: 0x0000006a (decimal:  106) --> SEGMENTATION VIOLATION (SEG1)
---------------------------------------------------------------------------
VA  0: -> 122 ist in Seg1: 512 + (122 - 128) = 506 (physikalische Adresse)
VA  1: -> 121 ist in Seg1: 512 + (121 - 128) = 505 (physikalische Adresse)
VA  2: -> 7 ist in Seg0:   7 + 0 = 7 (physikalische Adresse)
VA  3: -> 10 ist in Seg0:  10 + 0 = 10 (physikalische Adresse)
VA  4: 106: Segmgentatin violation, da 33 in keinem Segment ist







2)
What is the highest legal virtual address in segment 0? --> von address space ausgehende
---------19

What about the lowest legal virtual address in segment 1? --> von address space ausgehende
---------108
 
What are the lowest and highest illegal addresses in this entire address space? --> von address space ausgehende
---------20 und 107


Finally, how would you run segmentation.py with the -A ﬂag to test if you are right?
----------------------------------
./segmentation.py -a 128 -p 512 -b 0 -l 20 -B 512 -L 20 -A 19,108,107,20 -c

ARG seed 0
ARG address space size 128
ARG phys mem size 512

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 20

  Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
  Segment 1 limit                  : 20

Virtual Address Trace
  VA  0: 0x00000013 (decimal:   19) --> VALID in SEG0: 0x00000013 (decimal:   19)
  VA  1: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
  VA  2: 0x0000006b (decimal:  107) --> SEGMENTATION VIOLATION (SEG1)
  VA  3: 0x00000014 (decimal:   20) --> SEGMENTATION VIOLATION (SEG0)







3)
./segmentation.py -a 16 -p 128 -A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 --b0 0 --l0 2 --b1 15 --l1 2 -c
ARG seed 0
ARG address space size 16
ARG phys mem size 128

Segment register information:

  Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
  Segment 0 limit                  : 2

  Segment 1 base  (grows negative) : 0x0000000f (decimal 15)
  Segment 1 limit                  : 2

Virtual Address Trace
  VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
  VA  1: 0x00000001 (decimal:    1) --> VALID in SEG0: 0x00000001 (decimal:    1)
  VA  2: 0x00000002 (decimal:    2) --> SEGMENTATION VIOLATION (SEG0)
  VA  3: 0x00000003 (decimal:    3) --> SEGMENTATION VIOLATION (SEG0)
  VA  4: 0x00000004 (decimal:    4) --> SEGMENTATION VIOLATION (SEG0)
  VA  5: 0x00000005 (decimal:    5) --> SEGMENTATION VIOLATION (SEG0)
  VA  6: 0x00000006 (decimal:    6) --> SEGMENTATION VIOLATION (SEG0)
  VA  7: 0x00000007 (decimal:    7) --> SEGMENTATION VIOLATION (SEG0)
  VA  8: 0x00000008 (decimal:    8) --> SEGMENTATION VIOLATION (SEG1)
  VA  9: 0x00000009 (decimal:    9) --> SEGMENTATION VIOLATION (SEG1)
  VA 10: 0x0000000a (decimal:   10) --> SEGMENTATION VIOLATION (SEG1)
  VA 11: 0x0000000b (decimal:   11) --> SEGMENTATION VIOLATION (SEG1)
  VA 12: 0x0000000c (decimal:   12) --> SEGMENTATION VIOLATION (SEG1)
  VA 13: 0x0000000d (decimal:   13) --> SEGMENTATION VIOLATION (SEG1)
  VA 14: 0x0000000e (decimal:   14) --> VALID in SEG1: 0x0000000d (decimal:   13)
  VA 15: 0x0000000f (decimal:   15) --> VALID in SEG1: 0x0000000e (decimal:   14)







4)
./segmentation.py -a 128 -p 512 --b0 0 --l0 60 --b1 512 --l1 60 -n 5 -c 

--> base and bounds are important
--> when they get bigger, there is a higher chance for addresses to be valid





5)
./segmentation.py -a 128 -p 512 --b0 0 --l0 0 --b1 512 --l1 0 -n 20 -c 

--> base and bounds exist, but that's it
--> so no size









