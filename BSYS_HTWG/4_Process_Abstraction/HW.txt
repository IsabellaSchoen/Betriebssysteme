HOMEWORKS


1) ./process-run.py -l 5:100,5:100
__________________________________________________________________________________
X: consist of 5 instructions
Y: the chances that each instruction is a CPU instruction are 100%
----------------------------------------------------------------------------------
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu

Process 1
  cpu
  cpu
  cpu
  cpu
  cpu

Important behaviors:
  System will switch when the current process is FINISHED or ISSUES AN IO
  After IOs, the process issuing the IO will run LATER (when it is its turn)
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs
  1     RUN:cpu      READY          1
  2     RUN:cpu      READY          1
  3     RUN:cpu      READY          1
  4     RUN:cpu      READY          1
  5     RUN:cpu      READY          1
  6        DONE    RUN:cpu          1
  7        DONE    RUN:cpu          1
  8        DONE    RUN:cpu          1
  9        DONE    RUN:cpu          1
 10        DONE    RUN:cpu          1





2) ./process-run.py -l 4:100,1:0
------------------------------------------------------------------
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu

Process 1
  io
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2     RUN:cpu      READY          1            
  3     RUN:cpu      READY          1            
  4     RUN:cpu      READY          1            
  5        DONE     RUN:io          1            
  6        DONE    WAITING                     1 
  7        DONE    WAITING                     1 
  8        DONE    WAITING                     1 
  9        DONE    WAITING                     1 
 10*       DONE       DONE 
--> there are two processes running on the CPU
--> the first programm (PID:0) runs until it's complete
--> after the second program runs (PID:1) with I/O, so it's waiting
--> when process 0 is finished there will be a context switch to run process 1
--> context switch = the process of storing the state of a process or thread, so that it can be restored 
    and resume execution at a later point. 
    This allows multiple processes to share a single central processing unit (CPU), and is an essential 
    feature of a multitasking operating system. 




3) ./process-run.py -l 1:0,4:100
-------------------------------------------------------------------------
Produce a trace of what would happen when you run these processes:
Process 0
  io

Process 1
  cpu
  cpu
  cpu
  cpu
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6*       DONE       DONE   
--> because the first process goes into the waiting state the second process has the opportunity
    to run, so it is faster compares to exercise 2 :)




4) ./process-run.py -l 1:0,4:100 -S SWITCH_ON_END
____________________________________________________________
-S: determines how the system reacts when a process issues an I/O
SWITCH_ON_END: a flag so that the system will NOT switch to another process while one is doing I/O
	       instead it the process waits until the another process is completely finished
----------------------------------------------------------------------------------
Produce a trace of what would happen when you run these processes:
Process 0
  io

Process 1
  cpu
  cpu
  cpu
  cpu
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING      READY                     1 
  3     WAITING      READY                     1 
  4     WAITING      READY                     1 
  5     WAITING      READY                     1 
  6*       DONE    RUN:cpu          1            
  7        DONE    RUN:cpu          1            
  8        DONE    RUN:cpu          1            
  9        DONE    RUN:cpu          1   
--> in this example the flag is responsible that every process should be run to 
    complete no matter if there is a waiting or running state




5.) ./process-run.py -l 1:0,4:100 -S SWITCH_ON_IO
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6*       DONE       DONE        
--> now the focus is on switching between to another process whenever one is 
    waiting for I/O, so of course the first process is I/O and changes to
    second process           




6) ./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p
__________________________________________________________________________________
IO_RUN_LATER: when I/O completes, the process that issued it is not necessarily run
              right away; rather, whatever was running at the time keeps running
----------------------------------------------------------------------------------
Produce a trace of what would happen when you run these processes:
Process 0
  io
  io
  io

Process 1
  cpu
  cpu
  cpu
  cpu
  cpu

Process 2
  cpu
  cpu
  cpu
  cpu
  cpu

Process 3
  cpu
  cpu
  cpu
  cpu
  cpu
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*      READY    RUN:cpu      READY      READY          1            
  7       READY       DONE    RUN:cpu      READY          1            
  8       READY       DONE    RUN:cpu      READY          1            
  9       READY       DONE    RUN:cpu      READY          1            
 10       READY       DONE    RUN:cpu      READY          1            
 11       READY       DONE    RUN:cpu      READY          1            
 12       READY       DONE       DONE    RUN:cpu          1            
 13       READY       DONE       DONE    RUN:cpu          1            
 14       READY       DONE       DONE    RUN:cpu          1            
 15       READY       DONE       DONE    RUN:cpu          1            
 16       READY       DONE       DONE    RUN:cpu          1            
 17      RUN:io       DONE       DONE       DONE          1            
 18     WAITING       DONE       DONE       DONE                     1 
 19     WAITING       DONE       DONE       DONE                     1 
 20     WAITING       DONE       DONE       DONE                     1 
 21     WAITING       DONE       DONE       DONE                     1 
 22*     RUN:io       DONE       DONE       DONE          1            
 23     WAITING       DONE       DONE       DONE                     1 
 24     WAITING       DONE       DONE       DONE                     1 
 25     WAITING       DONE       DONE       DONE                     1 
 26     WAITING       DONE       DONE       DONE                     1 
 27*       DONE       DONE       DONE       DONE                       

Stats: Total Time 27
Stats: CPU Busy 18 (66.67%)
Stats: IO Busy  12 (44.44%)
--> not really. There is a lot of waiting status, not really effectively



7) ./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE  -p -c
__________________________________________________________________________________
IO_RUN_IMMEDIATE: immediately runs the process that issued the I/O
----------------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*     RUN:io      READY      READY      READY          1            
  7     WAITING    RUN:cpu      READY      READY          1          1 
  8     WAITING       DONE    RUN:cpu      READY          1          1 
  9     WAITING       DONE    RUN:cpu      READY          1          1 
 10     WAITING       DONE    RUN:cpu      READY          1          1 
 11*     RUN:io       DONE      READY      READY          1            
 12     WAITING       DONE    RUN:cpu      READY          1          1 
 13     WAITING       DONE    RUN:cpu      READY          1          1 
 14     WAITING       DONE       DONE    RUN:cpu          1          1 
 15     WAITING       DONE       DONE    RUN:cpu          1          1 
 16*       DONE       DONE       DONE    RUN:cpu          1            
 17        DONE       DONE       DONE    RUN:cpu          1            
 18        DONE       DONE       DONE    RUN:cpu          1            

Stats: Total Time 18
Stats: CPU Busy 18 (100.00%)
Stats: IO Busy  12 (66.67%)
--> comparing to the exercise before the CPU is here much better. CPU is used the while time 100%.
    I/O is running but immediately it runs another process starts. That's the chance for the CPU
    to run more often and focus on the processes with the state "ready". After this happened the 
    I/O is...of course...finished. I/O is busy of course but because of this flag the CPU has a 
    higher chance to run



8) 
1. ./process-run.py -s 1 -l 3:50,3:50 -c
---------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6     WAITING       DONE                     1 
  7*     RUN:io       DONE          1            
  8     WAITING       DONE                     1 
  9     WAITING       DONE                     1 
 10     WAITING       DONE                     1 
 11     WAITING       DONE                     1 
 12*       DONE       DONE             



2. ./process-run.py -s 2 -l 3:50,3:50 -c
---------------------------------------------------------------------------
SOLUTION:
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING     RUN:io          1          1 
  4     WAITING    WAITING                     2 
  5     WAITING    WAITING                     2 
  6*     RUN:io    WAITING          1          1 
  7     WAITING    WAITING                     2 
  8*    WAITING     RUN:io          1          1 
  9     WAITING    WAITING                     2 
 10     WAITING    WAITING                     2 
 11*    RUN:cpu    WAITING          1          1 
 12        DONE    WAITING                     1 
 13*       DONE       DONE    



3. ./process-run.py -s 3 -l 3:50,3:50 -c
---------------------------------------------------------------------------
SOLUTION:         
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING     RUN:io          1          1 
  4     WAITING    WAITING                     2 
  5     WAITING    WAITING                     2 
  6     WAITING    WAITING                     2 
  7*    RUN:cpu    WAITING          1          1 
  8*       DONE     RUN:io          1            
  9        DONE    WAITING                     1 
 10        DONE    WAITING                     1 
 11        DONE    WAITING                     1 
 12        DONE    WAITING                     1 
 13*       DONE    RUN:cpu          1    




1. ./process-run.py -s 1 -l 3:50,3:50 -S SWITCH_ON_IO -c
---------------------------------------------------------------------------
SOLUTION:     
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6     WAITING       DONE                     1 
  7*     RUN:io       DONE          1            
  8     WAITING       DONE                     1 
  9     WAITING       DONE                     1 
 10     WAITING       DONE                     1 
 11     WAITING       DONE                     1 
 12*       DONE       DONE             


2. ./process-run.py -s 2 -l 3:50,3:50 -S SWITCH_ON_IO -c
---------------------------------------------------------------------------
SOLUTION:  
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING     RUN:io          1          1 
  4     WAITING    WAITING                     2 
  5     WAITING    WAITING                     2 
  6*     RUN:io    WAITING          1          1 
  7     WAITING    WAITING                     2 
  8*    WAITING     RUN:io          1          1 
  9     WAITING    WAITING                     2 
 10     WAITING    WAITING                     2 
 11*    RUN:cpu    WAITING          1          1 
 12        DONE    WAITING                     1 
 13*       DONE       DONE      



3.
./process-run.py -s 3 -l 3:50,3:50 -S SWITCH_ON_IO -c
---------------------------------------------------------------------------
SOLUTION:  
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING     RUN:io          1          1 
  4     WAITING    WAITING                     2 
  5     WAITING    WAITING                     2 
  6     WAITING    WAITING                     2 
  7*    RUN:cpu    WAITING          1          1 
  8*       DONE     RUN:io          1            
  9        DONE    WAITING                     1 
 10        DONE    WAITING                     1 
 11        DONE    WAITING                     1 
 12        DONE    WAITING                     1 
 13*       DONE    RUN:cpu          1    




