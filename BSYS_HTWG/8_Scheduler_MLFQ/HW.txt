HOMEWORKS



1) Run a few randomly-generated problems with just two jobs and two queues; 
   compute the MLFQ execution trace for each. 
   Make your life easier by limiting the length of each job and turning off I/Os.
--------------------------------------------------------------
./mlfq.py -j 2 -n 2 -l 0,6,0:0,8,0
--> two jobs
--> first: start time = 0; run time = 6; I/O = 0
--> second: start time = 0; run time = 8; I/O = 0


Here is the list of inputs:
OPTIONS jobs 2
OPTIONS queues 2
OPTIONS allotments for queue  1 is   1
OPTIONS quantum length for queue  1 is  10
OPTIONS allotments for queue  0 is   1
OPTIONS quantum length for queue  0 is  10
OPTIONS boost 0
OPTIONS ioTime 5
OPTIONS stayAfterIO False
OPTIONS iobump False


For each job, three defining characteristics are given:
  startTime : at what time does the job enter the system
  runTime   : the total CPU time needed by the job to finish
  ioFreq    : every ioFreq time units, the job issues an I/O
              (the I/O takes ioTime units to complete)

Job List:
  Job  0: startTime   0 - runTime   6 - ioFreq   0
  Job  1: startTime   0 - runTime   8 - ioFreq   0


Execution Trace:

[ time 0 ] JOB BEGINS by JOB 0
[ time 0 ] JOB BEGINS by JOB 1
[ time 0 ] Run JOB 0 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 5 (of 6) ]
[ time 1 ] Run JOB 0 at PRIORITY 1 [ TICKS 8 ALLOT 1 TIME 4 (of 6) ]
[ time 2 ] Run JOB 0 at PRIORITY 1 [ TICKS 7 ALLOT 1 TIME 3 (of 6) ]
[ time 3 ] Run JOB 0 at PRIORITY 1 [ TICKS 6 ALLOT 1 TIME 2 (of 6) ]
[ time 4 ] Run JOB 0 at PRIORITY 1 [ TICKS 5 ALLOT 1 TIME 1 (of 6) ]
[ time 5 ] Run JOB 0 at PRIORITY 1 [ TICKS 4 ALLOT 1 TIME 0 (of 6) ]
[ time 6 ] FINISHED JOB 0
[ time 6 ] Run JOB 1 at PRIORITY 1 [ TICKS 9 ALLOT 1 TIME 7 (of 8) ]
[ time 7 ] Run JOB 1 at PRIORITY 1 [ TICKS 8 ALLOT 1 TIME 6 (of 8) ]
[ time 8 ] Run JOB 1 at PRIORITY 1 [ TICKS 7 ALLOT 1 TIME 5 (of 8) ]
[ time 9 ] Run JOB 1 at PRIORITY 1 [ TICKS 6 ALLOT 1 TIME 4 (of 8) ]
[ time 10 ] Run JOB 1 at PRIORITY 1 [ TICKS 5 ALLOT 1 TIME 3 (of 8) ]
[ time 11 ] Run JOB 1 at PRIORITY 1 [ TICKS 4 ALLOT 1 TIME 2 (of 8) ]
[ time 12 ] Run JOB 1 at PRIORITY 1 [ TICKS 3 ALLOT 1 TIME 1 (of 8) ]
[ time 13 ] Run JOB 1 at PRIORITY 1 [ TICKS 2 ALLOT 1 TIME 0 (of 8) ]
[ time 14 ] FINISHED JOB 1

Final statistics:
  Job  0: startTime   0 - response   0 - turnaround   6
  Job  1: startTime   0 - response   6 - turnaround  14

  Avg  1: startTime n/a - response 3.00 - turnaround 10.00







2) How would you run the scheduler to reproduce each of the examples in the chapter?
---------------------------------------------------------------------
8.2)
jobs:	     1
queues:	     3
IO:	     0
length:      200
timeslice:   10
---> ./mlfq.py -n 3 -q 10 --jlist 0,200,0



8.3)
jobs:	     2
arriving:    0 and 100
queues:	     3
IO:	     0
length:      180 and 20 (in total)
timeslice:   10
---> ./mlfq.py -n 3 -q 10 --jlist 0,200,0:100,20,0



8.4) no idea....
jobs:	     2
arriving:    0 and 50
queues:	     3
IO:	     0
length:      175 and 25 (in total)
timeslice:   10
---> ./mlfq.py -j 2 -n 3 --jlist 0,175,0:50,25,1 -Q 10,10,30,1,4



8.5) - boost 
./mlfq.py --jlist 0,200,0:100,30,5:100,30,5 -i 5 -q 10 -S -B 50



8.6) - accounting
8.6.1)
./mlfq.py --jlist 0,200,0:80,90,9 -q 10 -S -i 1




8.6.2)
./mlfq.py --jlist 0,200,0:80,90,9 -q 10 -i 1




8.7) 
./mlfq.py --jlist 0,130,0:0,130,0 -a 2 -Q 10,20,40






3) How would you configure the scheduler parameters to behave just like a round-robin scheduler?
---------------------------------------------------------------------
eine queue
3 jobs
./mlfq.py -j 3 -n 1 (0,100,0:0,100,0:0,100,0) -q 5





4) Craft a workload with two jobs and scheduler parameters so that one job takes advantage of the older 
   Rules 4a and 4b (turned on with the-S flag) to game the scheduler and obtain 99% of the CPU over a 
   particular time interval.
---------------------------------------------------------------------







5) Given a system with a quantum length of 10 ms in its highest queue, how often would you have to boost 
   jobs back to the highest priority level (with the -B flag) in order to guarantee that a single long-running 
   (and potentially-starving) job gets at least 5% of the CPU?
---------------------------------------------------------------------
./mlfq.py -q 10 -j 2 -l 0,20,0:0,20,0 -B 2 -c






6) One question that arises in scheduling is which end of a queue to add a job that just finished I/O; the -I flag 
   changes this behavior for this scheduling simulator. 
   Play around with some workloads and see if you can see the effect of this flag.
---------------------------------------------------------------------
-I, --iobump: if specified, jobs that finished I/O move immediately to front of current queue





















